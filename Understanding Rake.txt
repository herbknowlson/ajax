
# http://martinfowler.com/articles/rake.htmlhttp://martinfowler.com/articles/rake.html
# http://www.stuartellis.eu/articles/rake/

Rake is Declarative

Rake itself is designed to be a declarative system - you specify the result that you want, 
and Rake carries out the associated task and dependent tasks as necessary. 
This means that a set of correctly defined tasks will do as little or as much as is necessary to produce a known state.

The task types

use a dependency based style of computation rather than the usual imperative style.

 imperative programming is a programming paradigm that describes computation in terms of statements that change a program state. 
 In much the same way that the imperative mood in natural languages expresses commands to take action, 
 imperative programs define sequences of commands for the computer to perform. 
 Imperative programming (necessary programming) is focused on describing how a program operates.
 
 Declarative programming contrasts with imperative and procedural programming. 
 Declarative programming is a non-imperative style of programming in which programs describe their desired results 
 without explicitly listing commands or steps that must be performed.
 
 With an imperative model, each routine calls the steps in the routine. 
 In a dependency based system we have tasks and specify pre-requisites (their dependencies). 
 
 task :codeGen do
   # do the code generation
 end
 
 task :compile => :codeGen do
   #do the compilation
 end
 
 task :dataLoad => :codeGen do
   # load the test data
 end
 
 task :test => [:compile, :dataLoad] do
   # run the tests
end


It's natural to think of a build in terms of tasks and dependencies, most steps in a build are idempotent, 
and we really don't want unnecessary work to slow down the build.

Idempotence (/?a?d?m'po?t?ns/ eye-d?m-poh-t?ns) is the property of certain operations in mathematics and computer science, 
that can be applied multiple times without changing the result beyond the initial application. 
The concept of idempotence arises in a number of places in abstract algebra (in particular, in the theory of projectors and closure operators) 
and functional programming (in which it is connected to the property of referential transparency). 
The GET, PUT, and DELETE methods of the Hypertext Transfer Protocol (HTTP) computer protocol are a common example of idempotence.

rake is an internal Domain Specific Language (DSL) using Ruby.
The fact that rake is an internal DSL for a general purpose language is a very important difference between it and the other two. 
It essentially allows me to use the full power of ruby any time I need it, at the cost of having to do a few odd looking things 
to ensure the rake scripts are valid ruby. 
Since ruby is a unobtrusive language, there's not much in the way of syntactic oddities. 
Furthermore since ruby is a full blown language, I don't need to drop out of the DSL to do interesting things 
- which has been a regular frustration using make and ant. 
Indeed I've come to view that a build language is really ideally suited to an internal DSL because you do need that full language power 
just often enough to make it worthwhile - and you don't get many non-programmers writing build scripts.

